// app/api/ask/route.js

import { HuggingFaceInference } from "@langchain/community/llms/hf";
import { FaissStore } from "@langchain/community/vectorstores/faiss";
import { HuggingFaceInferenceEmbeddings } from "@langchain/community/embeddings/hf";
import { loadQAStuffChain } from "langchain/chains";
import { PromptTemplate } from "@langchain/core/prompts";
import fs from "fs";

let vectorStore;

async function loadVectorStore() {
  if (!vectorStore) {
    const embeddings = new HuggingFaceInferenceEmbeddings({
      apiKey: process.env.HF_API_KEY,
      model: "sentence-transformers/all-MiniLM-L6-v2",
    });
    vectorStore = await FaissStore.load("faiss_index", embeddings);
  }
  return vectorStore;
}

export async function POST(req) {
  try {
    const body = await req.json();
    const { question } = body;

    console.log("Received question:", question); // âœ… Debug log

    const vectorStore = await loadVectorStore();
    console.log("Vector store loaded"); // âœ… Debug log

    const retrievedDocs = await vectorStore.similaritySearch(question, 3);
    console.log("Similarity search successful:", retrievedDocs); // âœ… Debug log

    const llm = new HuggingFaceInference({
      apiKey: process.env.HF_API_KEY,
      model: "mistralai/Mistral-7B-Instruct-v0.3",
      temperature: 0.7,
    });

    const prompt = new PromptTemplate({
      template: `Answer the question strictly based on the context. Do not explicitly mention you are using a specific context to answer. You are to only answer questions related to Pakistani law whose answer is in the context.
      Quote the source with it's name from which you are answering also give an explaination of it, cite the article title or number and the name of the document it belongs to.  
      If the answer is not in the context just say "It is beyond my scope I only answer legal questions" and don't say anything else.
Context: {context}
Question: {question}
Answer: `,
      inputVariables: ["context", "question"],
    });

    const chain = loadQAStuffChain(llm, { prompt });
    console.log("Chain initialized"); // âœ… Debug log

    const result = await chain._call({
      input_documents: retrievedDocs,
      question,
    });

    console.log("Chain result:", result); // âœ… Debug log

    return new Response(JSON.stringify({ answer: result.text }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error("ðŸ”¥ RAG error:", error); // ðŸ”¥ Important log
    return new Response(JSON.stringify({ error: "Something went wrong" }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}

PAGE
'use client';

import { useState, useRef, useEffect } from 'react';
import { SendHorizontal } from 'lucide-react';

export default function LawSearch() {
  const [question, setQuestion] = useState('');
  const [messages, setMessages] = useState([]); // [{ role: 'user' | 'bot', text: string }]
  const [loading, setLoading] = useState(false);
  const containerRef = useRef(null);

  const handleAsk = async () => {
    if (!question.trim()) return;

    const userQuestion = question;
    setQuestion('');
    setLoading(true);

    // Add user message
    setMessages((prev) => [...prev, { role: 'user', text: userQuestion }]);

    try {
      const response = await fetch('/api/ask', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ question: userQuestion }),
      });

      const data = await response.json();

      if (response.ok) {
        setMessages((prev) => [...prev, { role: 'bot', text: data.answer }]);
      } else {
        setMessages((prev) => [
          ...prev,
          { role: 'bot', text: "Sorry, something went wrong. Please try again." },
        ]);
      }
    } catch (error) {
      console.error("Error calling /api/ask:", error);
      setMessages((prev) => [
        ...prev,
        { role: 'bot', text: "An error occurred while getting the answer." },
      ]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (containerRef.current) {
      containerRef.current.scrollTop = containerRef.current.scrollHeight;
    }
  }, [messages, loading]);

  const hasContent = messages.length > 0 || loading;

  return (
    <div className="flex flex-col bg-purple-950 text-white">
      {/* Chat area */}
      <div
        ref={containerRef}
        className="flex-1 overflow-y-auto px-4 py-6 transition-all duration-300 justify-center flex"
      >
        <div className="max-w-2xl w-full space-y-4 flex flex-col">
          {!hasContent && (
            <h2 className="text-center text-2xl font-semibold opacity-50">
              Ask your legal question
            </h2>
          )}

          {messages.map((msg, idx) => (
            <div
              key={idx}
              className={` p-3 rounded-lg shadow-md whitespace-pre-line leading-relaxed
                ${msg.role === 'user' ? 'bg-purple-800 self-end text-right' : 'bg-[#340259] self-start text-left '}
              `}
            >
              {msg.text}
            </div>
          ))}

          {loading && (
            <p className="text-sm text-purple-300 animate-pulse">Thinking...</p>
          )}
        </div>
      </div>

      {/* Input area */}
      <div className="w-full px-4 py-3 border-y border-purple-800 bg-[#250140]">
        <div className="max-w-2xl mx-auto relative">
          <input
            type="text"
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && handleAsk()}
            className="w-full pr-12 pl-4 py-3 bg-purple-900 text-white placeholder-purple-400 rounded-lg border border-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
            placeholder="Ask anything legal"
          />
          <button
            onClick={handleAsk}
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-purple-300 hover:text-white transition"
          >
            <SendHorizontal size={20} />
          </button>
        </div>
      </div>
    </div>
  );
}
