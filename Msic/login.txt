import React, { useState } from "react";
import { Eye, EyeOff } from "lucide-react"; // Import icons
import { useDispatch, useSelector } from "react-redux";
import { updateUserField, resetUser } from "@/states/userSlice";

const Login = ({ onClose }) => {
  const dispatch = useDispatch();
  
  // Redux email state (if stored previously)
  const emailFromRedux = useSelector((state) => state.user.email);
  const [showPassword, setShowPassword] = useState(false);


  // Local state for user input
  const [email, setEmail] = useState(emailFromRedux || "");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(""); // Clear previous errors

    try {
      const response = await fetch("/api/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok) {
        // Store user in Redux state
        dispatch(updateUserField({ field: "email", value: data.email }));
        dispatch(updateUserField({ field: "token", value: data.token }));
        alert("Logged in successfully!");
        onClose(); // Close login modal
      } else {
        setError(data.message || "Invalid email or password.");
      }
    } catch (err) {
      setError("Server error. Please try again.");
    }
  };

  return (
    <div className="fixed top-0 left-0 w-full h-full flex justify-center items-center bg-black/75 z-50">
      <div className="bg-gray-900 text-white p-6 rounded-lg shadow-lg w-11/12 max-w-md relative">
        <button className="absolute top-2 right-3 text-2xl" onClick={onClose}>
          &times;
        </button>
        <h2 className="text-3xl font-bold mb-4">Log in</h2>

        {error && <p className="text-red-500 text-sm mb-3">{error}</p>}

        <form onSubmit={handleSubmit}>
          <input
            type="text"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full p-3 mb-3 bg-gray-800 rounded-lg text-white"
            required
          />

                                <div className="relative w-full">
                        <input
                          type={showPassword ? "text" : "password"}
                          placeholder="Password"
                          value={password}
                          onChange={(e) => setPassword(e.target.value)}
                          className="w-full p-3 mb-3 bg-gray-800 rounded-lg text-white pr-12"
                          required
                        // disabled={!emailVerified} // ✅ Disables input if email is not verified
                        />
                        <button
                          type="button"
                          className="absolute top-3.5 right-3 flex items-center text-gray-400"
                          onClick={() => setShowPassword(!showPassword)}
                        >
                          {showPassword ? <Eye size={24} /> : <EyeOff size={24} />}
                        </button>
                      </div>

          <button type="submit" className="w-full bg-purple-700 p-3 rounded-lg">
            Log in
          </button>
        </form>

        <p className="text-center text-blue-400 my-4"> OR </p>

        {/* Social login buttons (if needed) */}
        <div className="mt-4 flex flex-col gap-2">
          {/* Social buttons here */}
        </div>
      </div>
    </div>
  );
};

export default Login;


"use client"

import React, { useState } from "react";
import Link from "next/link";
import SignUp from "./SignUp";
import Login from "./Login";
import LoginBtn from "./LoginBtn";
import SignupBtn from "./SignupBtn";
import { useSelector,useDispatch } from "react-redux";
import { toggleSignUpBox } from "@/states/signUpSlice";
import { useSession } from "next-auth/react";

const Navbar = () => {
  // const [isSignupOpen, toggleSignUpPopUp] = useState(false); // State to control Signup visibility
  const [isLoginOpen, setLoginOpen] = useState(false); // State to control Signup visibility
  const [showDropDown, setShowDropDown] = useState(false); // State to control Dropdown visibility

  const isSignupOpen = useSelector((state) => state.signUpBox.value)
  const dispatch = useDispatch() // ✅ Dispatch function

  const toggleSignUpPopUp = () => {
    dispatch(toggleSignUpBox()) // ✅ Dispatch action to toggle Signup visibility
  }

  

  return (
    <>
      <nav className="flex flex-col md:flex-row purple-bg text-white md:justify-between items-center font-['Inter'] border-b-2 border-b-amber-50">
        <div className="flex text-3xl xl:text-4xl 2xl:text-5xl m-5 font-bold">
          <span>Sentinel</span>
          <span className="text-purple-400">Assosiates</span>
        </div>
        <ul className="flex gap-8 text-2xl xl:text-2xl 2xl:text-3xl my-7 mx-7 ">
          <Link href={"/"} className="hover:text-purple-600 transition-all duration-400 ease-in-out">
            <li>Home</li>
          </Link>
          <Link href={"/"} className="hover:text-purple-600 transition-all duration-400 ease-in-out">
            <li>About</li>
          </Link>
          <Link href={"/"} className="hover:text-purple-600 transition-all duration-400 ease-in-out">
            <li>Contact</li>
          </Link>
        </ul>

        <div className="hidden md:flex gap-8 mx-8">
          {/* Pass the toggleSignUpPopUp function to LoginBtn */}
           {/* <SignupBtn />
          <LoginBtn openLogin={() => setLoginOpen(true)} /> */}




{/* Show When Logged In  */}
          <button onClick={()=>setShowDropDown(!showDropDown)} id="dropdownDefaultButton" data-dropdown-toggle="dropdown"
           className="max-w-94 mx-10 text-white overflow-hidden bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-xl px-5 py-2.5 text-center inline-flex items-center dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800" type="button">
            Welcome<br/>arsadasadfgdfgdgdfgdfcom
            <svg className="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
<path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m1 1 4 4 4-4"/>
</svg>
</button>

{/* <!-- Dropdown menu --> */}
<div id="dropdown" className={`z-10 ${showDropDown?"":"hidden"} absolute right-32 top-20 bg-white divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700`}>
    <ul className=" py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton">
      <li>
        <a href="#" className="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Dashboard</a>
      </li>
      <li>
        <a href="#" className="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Settings</a>
      </li>
      <li>
        <a href="#" className="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Earnings</a>
      </li>
      <li>
        <a href="#" className="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Sign out</a>
      </li>
    </ul>
</div>



        </div>

   

      </nav>

      {/* Render Signup if isSignupOpen is true */}
      {isSignupOpen && <SignUp onClose={() => toggleSignUpPopUp} />}
      {isLoginOpen && <Login onClose={() => setLoginOpen(false)} />}
    </>
  );
};

export default Navbar;
